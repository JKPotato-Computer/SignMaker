class Sign {

	/**
	 * Cretes a new sign.
	 * @param {Object} [opt] - Optional parameters.
	 * @param {string} [opt.controlText="New Sign"] - Control cities to display on the sign.
	 * @param {string} [opt.shieldPosition] - Where the shields should be displayed relative to the control cities.
	 * @param {boolean} [opt.shieldBacks=false] - Whether or not shields should be displayed with backings.
	 * @param {string} [opt.guideArrow] - Which guide arrow to display on the sign, if any.
	 * @param {number} [opt.guideArrowLanes=1] - Number of lanes actoss to display guide arrows.
	 * @param {string} [opt.otherSymbols] - Other symbols on the bottom of signs (like Quebec style exit markers)
	 * @param {string} [opt.oSNum=""] - Number to place on otherSymbol
	 * @param {string} [opt.actionMessage=""] - Custom subtext to display on the sign.
	 * @param {Shield[]} [opt.shields] - Array of shields to include on sign.
	 */
	constructor({
			shieldPosition,
			shieldBacks = false,
			guideArrow,
			guideArrowLanes = 1,
            subPanels = [],
			otherSymbol,
			oSNum = "",
            controlText = "New Sign",
            actionMessage = "",
            shields = [],
		} = {}
	) {
		this.controlText = controlText;
		if (this.shieldPositions.includes(shieldPosition)) {
			this.shieldPosition = shieldPosition;
		} else {
			this.shieldPosition = "Above";
		}
		if (this.otherSymbols.includes(otherSymbol)) {
			this.otherSymbol = otherSymbol;
		}
		else {
			this.otherSymbol = "None";
		}
		this.shieldBacks = shieldBacks;
		if (this.guideArrows.includes(guideArrow)) {
			this.guideArrow = guideArrow;
		} else {
			this.guideArrow = "None";
		}
		if (guideArrowLanes >= 0 && guideArrowLanes <= 6) {
			this.guideArrowLanes = guideArrowLanes;
		} else {
			this.guideArrowLanes = 0;
		}
		this.oSNum = oSNum;
		this.actionMessage = actionMessage;
		this.shields = shields;
        this.subPanels = subPanels;
	}

	/**
	 * Create a new shield for the post. Add it to the end of the list of existing shields.
	 */
     
	newShield(number) {
		const newShield = new Shield();
		this.subPanels[number].shields.push(newShield);
	}
    
    duplicateShield(shieldIndex,number) {
        const existingShield = this.shields[shieldIndex];
        const newShield = new Shield({
            type: existingShield.type,
            routeNumber: existingShield.routeNumber,
            to: existingShield.to,
            specialBannerType: existingShield.specialBannerType,
            bannerType: existingShield.bannerType,
            bannerType2: existingShield.bannerType2,
            bannerPosition: existingShield.bannerPosition
        })
        this.subPanels[number].shields.splice(++shieldIndex,0,newShield)
        
    }

	/**
	 * Delete an existing shield at the requested index.
	 * @param {number} shieldIndex - Position of the shield in the array of shields on this sign to delete.
	 */
	deleteShield(shieldIndex,number) {
		this.subPanels[number].shields.splice(shieldIndex, 1);
	}
    
    /**
     * Creates a new subpanel
    */
    
    newSubPanel() {
        const new_subPanel = new SubPanels();
        this.subPanels.push(new_subPanel);
    }
    
    /**
      * Deletes a subpanel
      * @param {number} subPanelIndex - you already know lol
    */
    
    deleteSubPanel(subPanelIndex) {
        this.subPanels.splice(subPanelIndex, 1);
    }
    
}

Sign.prototype.shieldPositions = ["Left", "Above", "Right"];
Sign.prototype.guideArrows = [
	"None",
	"Side Left",
	"Side Right",
	"Exit Only",
    "Split Exit Only",
	"Left/Down Arrow",
	"Left Arrow",
	"Left/Up Arrow",
	"Right/Down Arrow",
	"Right Arrow",
	"Right/Up Arrow",
	"Down Arrow",
	"Up Arrow"
];
Sign.prototype.exitguideArrows = [
    "Down Arrow",
	"Left/Up Arrow",
	"Right/Up Arrow",

];

Sign.prototype.arrowPositions = [
    "Middle",
    "Left",
    "Right"
]

Sign.prototype.leftPositions = [
    "Above",
    "Left",
    "Right"
]

Sign.prototype.otherSymbols = [
	"None",
	"Quebec-Style Exit Marker",
	"Quebec-Left"
]